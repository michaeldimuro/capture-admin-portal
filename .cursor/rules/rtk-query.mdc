---
description: rtk-query implementation best practices
globs: 
alwaysApply: false
---
Here’s a well-structured `RTK_QUERY_BEST_PRACTICES.md` file that outlines how to use **RTK Query** (Redux Toolkit Query) effectively with best practices and examples:

---

```markdown
# 🔍 RTK Query — Best Practices Guide

RTK Query is a powerful data fetching and caching tool from Redux Toolkit that simplifies handling server state in your applications. This guide outlines best practices to help you structure, scale, and optimize your use of RTK Query.

---

## 📁 Recommended Project Structure

```
src/
├── app/
│   ├── store.js
│   └── api.js                 # Inject all endpoints here
│
├── features/
│   ├── users/
│   │   ├── usersApi.js       # Feature-specific endpoints
│   │   └── UserList.jsx
│   └── posts/
│       ├── postsApi.js
│       └── PostDetail.jsx
```

---

## ✅ General Best Practices

### 1. **Split API Definitions by Domain**

Create separate API slices for major feature domains (e.g., users, posts, products).

```js
// features/users/usersApi.js
import { api } from '@/app/api';

export const usersApi = api.injectEndpoints({
  endpoints: (builder) => ({
    getUsers: builder.query({
      query: () => '/users',
    }),
  }),
  overrideExisting: false,
});
```

---

### 2. **Centralize the Base API Setup**

```js
// app/api.js
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const api = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),
  tagTypes: ['User', 'Post'],
  endpoints: () => ({}), // All features inject here
});
```

Inject into the store:

```js
// app/store.js
import { configureStore } from '@reduxjs/toolkit';
import { api } from './api';

export const store = configureStore({
  reducer: {
    [api.reducerPath]: api.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(api.middleware),
});
```

---

### 3. **Use Tags for Auto-Invalidation**

Tag data to easily trigger refetching after mutations.

```js
getUsers: builder.query({
  query: () => '/users',
  providesTags: ['User'],
}),
createUser: builder.mutation({
  query: (user) => ({
    url: '/users',
    method: 'POST',
    body: user,
  }),
  invalidatesTags: ['User'],
}),
```

---

### 4. **Leverage Auto-Generated Hooks**

Use the hooks generated by RTK Query for a clean, idiomatic React experience.

```js
const { data: users, isLoading, error } = useGetUsersQuery();
```

---

### 5. **Cache Strategically**

Use caching options to fine-tune stale times, polling, and re-fetching.

```js
getUsers: builder.query({
  query: () => '/users',
  keepUnusedDataFor: 60,       // seconds
  refetchOnFocus: true,
  refetchOnReconnect: true,
}),
```

---

### 6. **Handle Errors Gracefully**

Access error metadata and provide fallback UI:

```js
const { error } = useGetUsersQuery();
if (error) return <ErrorMessage />;
```

---

### 7. **Use Lazy Queries for On-Demand Fetching**

```js
const [trigger, { data, isFetching }] = useLazyGetUserByIdQuery();
<button onClick={() => trigger(userId)}>Load</button>
```

---

### 8. **Encapsulate in Custom Hooks (Optional)**

For more abstraction and reuse:

```js
// useUsers.js
import { useGetUsersQuery } from './usersApi';

export const useUsers = () => {
  const query = useGetUsersQuery();
  return query;
};
```

---

## 🚫 Anti-Patterns to Avoid

| ❌ Don’t | ✅ Do Instead |
|--------|--------------|
| Manually fetch inside `useEffect` | Use RTK Query’s hooks |
| Use local state for remote data | Use RTK Query for server state |
| Refetch after every mutation manually | Use `invalidatesTags` |
| Define all endpoints in one file | Split APIs by feature |

---

## 🧪 Testing Tips

- Use `setupApiStore()` from RTK Query’s testing utilities.
- Mock with MSW for integration tests.
- Prefer mocking endpoints, not the actual Redux store.

---

## 📚 Additional Resources

- [RTK Query Docs](https://redux-toolkit.js.org/rtk-query/overview)
- [RTK Query Examples](https://github.com/reduxjs/redux-toolkit/tree/master/examples/query)
- [Redux Toolkit Docs](https://redux-toolkit.js.org/introduction/getting-started)

---

By following these practices, you’ll keep your code clean, efficient, and scalable using RTK Query as your server state manager.

```

Let me know if you'd like a TypeScript version or sample test patterns using `jest` and `msw`.